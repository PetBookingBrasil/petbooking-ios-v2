//
//  SignupViewController.swift
//  petbooking-ios-v2
//
//  Created Ryniere S Silva on 29/04/17.
//  Copyright © 2017 Pet Booking Serviços e Desenvolvimento de Softwares SA. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import PINRemoteImage
import AKMaskField

class SignupViewController: UIViewController, SignupViewProtocol {
	
    // MARK: - Outlets
	@IBOutlet weak var profilePictureView: UIView!
    
	@IBOutlet weak var profilePictureImageView: UIImageView!
    @IBOutlet weak var cameraIconImageView: UIImageView!
    @IBOutlet weak var userIconImageView: UIImageView!
    @IBOutlet weak var emailIconImageView: UIImageView!
    @IBOutlet weak var phoneIconImageView: UIImageView!
    @IBOutlet weak var passwordIconImageView: UIImageView!
    
	@IBOutlet weak var profilePictureFrameView: UIView!
    
	@IBOutlet weak var fullNameTextField: UITextField!
	@IBOutlet weak var passwordTextField: UITextField!
	@IBOutlet weak var emailTextField: UITextField!
	@IBOutlet weak var mobileNumberTextField: AKMaskField!
    
    @IBOutlet weak var passwordSeparatorView: UIView!
	
	@IBOutlet weak var nameAlertMessageLabel: UILabel!
	@IBOutlet weak var emailAlertMessageLabel: UILabel!
	@IBOutlet weak var mobileAlertMessageLabel: UILabel!
	@IBOutlet weak var passwordAlertMessageLabel: UILabel!
	@IBOutlet weak var profileImageAlertMessageLabel: UILabel!
    
    @IBOutlet weak var saveButton: UIButton!
	
	var presenter: SignupPresenterProtocol?
	var signupType: SignupType?
	
    // MARK: - App lifecycle
	override func viewDidLoad() {
		super.viewDidLoad()
		
		self.title = "Preencha os seus dados"
        
		hideKeyboardWhenTappedAround()
		setupView()
	}
	
	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)
		
		self.navigationController?.isNavigationBarHidden = false
		presenter?.fillFields()
	}
	
	func setupView() {
		setBackButton()
		
		profilePictureView.round()
		profilePictureFrameView.setBorder(width: 2, color: .white)
		profilePictureFrameView.round()
		saveButton.round()
						
		cameraIconImageView.image = cameraIconImageView.image!.withRenderingMode(.alwaysTemplate)
		cameraIconImageView.tintColor = .white
		
		userIconImageView.image = userIconImageView.image!.withRenderingMode(.alwaysTemplate)
		userIconImageView.tintColor = .black
		
		emailIconImageView.image = emailIconImageView.image!.withRenderingMode(.alwaysTemplate)
		emailIconImageView.tintColor = .black
				
		phoneIconImageView.image = phoneIconImageView.image!.withRenderingMode(.alwaysTemplate)
		phoneIconImageView.tintColor = .black
				
        if signupType == .editProfile {
            passwordTextField.isHidden = true
            passwordIconImageView.isHidden = true
            passwordSeparatorView.isHidden = true
            
            self.title = "Editar Informações"
            
        } else {
            passwordIconImageView.image = passwordIconImageView.image!.withRenderingMode(.alwaysTemplate)
            passwordIconImageView.tintColor = .black
        }
	}
    
    func checkValidField(value: String?, alertLabel: UILabel, alertMessage: String) -> Bool {
        if value == nil {
            alertLabel.isHidden = false
            alertLabel.text = alertMessage
            
            return false
        }
        
        alertLabel.isHidden = true
        return true
    }
    
    func checkValidPasswordFields() -> Bool {
        guard signupType != .editProfile else { return true }
        
        let password = passwordTextField.checkField()
        if !checkValidField(value: password, alertLabel: passwordAlertMessageLabel,
                            alertMessage: NSLocalizedString("invalid_password", comment: "")) {
            return false
        }
        
        if password!.count < 8 {
            passwordAlertMessageLabel.isHidden = false
            passwordAlertMessageLabel.text = NSLocalizedString("invalid_password", comment: "")
            
            return false
        } else {
            passwordAlertMessageLabel.isHidden = true
        }
        
        return true
    }
    
    func setProfileImageView(withUrlString urlString: String) {
        if let url = URL(string: urlString) {
            profilePictureImageView.pin_setImage(from: url)
        }
    }
    
    func setName(_ name: String) {
        fullNameTextField.text = name
    }
    
    func setEmail(_ email: String) {
        emailTextField.text = email
    }
    
    func setMobile(_ mobile: String) {
        mobileNumberTextField.text = mobile
    }
	
    // MARK: - Actions
	@IBAction func changeAvatar(_ sender: Any) {
		MIBlurPopup.show(SelectPhotoSourcePopupRouter.createModule(delegate: self), on: self)
	}
		
	@IBAction func save(_ sender: Any) {
		var isValid = true
		
		let name = fullNameTextField.checkField()
		if !checkValidField(value: name, alertLabel: nameAlertMessageLabel,
                            alertMessage: NSLocalizedString("invalid_name", comment: "")) {
			isValid = false
		}
				
		let email = emailTextField.checkField()
		if !checkValidField(value: email, alertLabel: emailAlertMessageLabel,
                            alertMessage: NSLocalizedString("invalid_email", comment: "")) {
			isValid = false
		}
		
		let mobile = mobileNumberTextField.checkField()?.components(separatedBy: CharacterSet.decimalDigits.inverted).joined()
		if !checkValidField(value: mobile, alertLabel: mobileAlertMessageLabel,
                            alertMessage: NSLocalizedString("invalid_mobile", comment: "")) {
			isValid = false
		}
				
		var password = passwordTextField.checkField()
		if signupType == .editProfile {
			password = ""
		}
		
		if !checkValidPasswordFields() {
			isValid = false
		}
		
		let image = profilePictureImageView.image
		
        if image == nil {
            isValid = checkValidField(value: nil,
                                      alertLabel: profileImageAlertMessageLabel,
                                      alertMessage: NSLocalizedString("invalid_profileImage", comment: ""))
        } else {
            let _ = checkValidField(value: "ok",
                                    alertLabel: profileImageAlertMessageLabel,
                                    alertMessage: NSLocalizedString("invalid_profileImage", comment: ""))
        }
		
		if isValid {
			guard let base64Avatar = image!.toBase64String() else { return }
			
            presenter?.createUser(name: name!, email: email!, mobile: mobile!, password: password!, avatar: "data:image/jpeg;base64,\(base64Avatar)")
		}
	}
}

extension SignupViewController:UIImagePickerControllerDelegate, UINavigationControllerDelegate {
	func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
		if let image = info[UIImagePickerControllerOriginalImage] as? UIImage {
			profilePictureImageView.image = image
		}
		
		picker.dismiss(animated: true, completion: nil);
	}
}

extension SignupViewController: SelectPhotoSourcePopupActionProtocol {
	
	func showCamera() {
		if UIImagePickerController.isSourceTypeAvailable(.camera){
			let imagePicker = UIImagePickerController()
			
			imagePicker.delegate = self
			imagePicker.sourceType = .camera
			imagePicker.allowsEditing = false
			
			self.present(imagePicker, animated: true, completion: nil)
		}
	}
	
	func showAlbum() {
		if UIImagePickerController.isSourceTypeAvailable(.savedPhotosAlbum){
			
			let imagePicker = UIImagePickerController()
			
			imagePicker.delegate = self
			imagePicker.sourceType = .savedPhotosAlbum
			imagePicker.allowsEditing = false
			
			self.present(imagePicker, animated: true, completion: nil)
		}
	}
}
