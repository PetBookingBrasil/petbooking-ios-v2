//
//  SignupViewController.swift
//  petbooking-ios-v2
//
//  Created Ryniere S Silva on 29/04/17.
//  Copyright © 2017 Pet Booking Serviços e Desenvolvimento de Softwares SA. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import PINRemoteImage
import AKMaskField

class SignupViewController: UIViewController, SignupViewProtocol {
	
    // MARK: - Outlets
	@IBOutlet weak var profilePictureView: UIView!
    
	@IBOutlet weak var profilePictureImageView: UIImageView!
    @IBOutlet weak var cameraIconImageView: UIImageView!
    
	@IBOutlet weak var fullNameTextField: UITextField!
	@IBOutlet weak var passwordTextField: UITextField!
	@IBOutlet weak var emailTextField: UITextField!
	@IBOutlet weak var mobileNumberTextField: AKMaskField!
    
    @IBOutlet weak var passwordSeparatorView: UIView!
	
    @IBOutlet weak var emailAlertMessageLabel: UILabel!
	@IBOutlet weak var passwordAlertMessageLabel: UILabel!
    
    @IBOutlet weak var saveButton: UIButton!
    @IBOutlet weak var viewPasswordButton: UIButton!
    
	var presenter: SignupPresenterProtocol?
	var signupType: SignupType?
    var seePassword = false
	
    // MARK: - App lifecycle
	override func viewDidLoad() {
		super.viewDidLoad()
		
		self.title = "Preencha os seus dados"
        
		hideKeyboardWhenTappedAround()
		setupView()
	}
	
	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)
		
		self.navigationController?.isNavigationBarHidden = false
		presenter?.fillFields()
	}
	
	func setupView() {
		setBackButton()
		
		profilePictureView.round()
		saveButton.round()
						
		cameraIconImageView.image = cameraIconImageView.image!.withRenderingMode(.alwaysTemplate)
		cameraIconImageView.tintColor = .white
						
        if signupType == .editProfile {
            passwordTextField.isHidden = true
            passwordSeparatorView.isHidden = true
            
            self.title = "Editar Informações"
        }
	}
    
    func checkValidField(value: String?, alertLabel: UILabel, alertMessage: String) -> Bool {
        if value == nil {
            alertLabel.isHidden = false
            alertLabel.text = alertMessage
            
            return false
        }
        
        alertLabel.isHidden = true
        return true
    }
    
    func checkValidPasswordFields() -> Bool {
        guard signupType != .editProfile else { return true }
        
        let password = passwordTextField.checkField()
        if !checkValidField(value: password, alertLabel: passwordAlertMessageLabel,
                            alertMessage: NSLocalizedString("invalid_password", comment: "")) {
            return false
        }
        
        if password!.count < 8 {
            passwordAlertMessageLabel.isHidden = false
            passwordAlertMessageLabel.text = NSLocalizedString("invalid_password", comment: "")
            
            return false
        } else {
            passwordAlertMessageLabel.isHidden = true
        }
        
        return true
    }
    
    func setProfileImageView(withUrlString urlString: String) {
        if let url = URL(string: urlString) {
            profilePictureImageView.pin_setImage(from: url)
        }
    }
    
    func setName(_ name: String) {
        fullNameTextField.text = name
    }
    
    func setEmail(_ email: String) {
        emailTextField.text = email
    }
    
    func setMobile(_ mobile: String) {
        mobileNumberTextField.text = mobile
    }
	
    // MARK: - Actions
    @IBAction func viewPasswordButtonTapped() {
        if seePassword {
            viewPasswordButton.setTitle("Esconder senha", for: .normal)
        } else {
            viewPasswordButton.setTitle("Exibir senha", for: .normal)
        }
        
        passwordTextField.isSecureTextEntry = !passwordTextField.isSecureTextEntry
        seePassword = !seePassword
    }
    
    @IBAction func changeAvatar(_ sender: Any) {
		MIBlurPopup.show(SelectPhotoSourcePopupRouter.createModule(delegate: self), on: self)
	}
		
	@IBAction func save(_ sender: Any) {
		var isValid = true
        
        let name = fullNameTextField.text!
        
        let email = emailTextField.text!
        if !email.isEmail {
            isValid = false
            _ = !checkValidField(value: nil, alertLabel: emailAlertMessageLabel,
                                alertMessage: NSLocalizedString("invalid_email", comment: ""))
        } else {
            _ = !checkValidField(value: email, alertLabel: emailAlertMessageLabel,
                                 alertMessage: NSLocalizedString("invalid_email", comment: ""))
        }
        
        let mobile = mobileNumberTextField.text!

        var password = passwordTextField.checkField()
        if signupType == .editProfile {
            password = ""
        }
        
		if !checkValidPasswordFields() {
			isValid = false
		}
		
		let image = profilePictureImageView.image
				
        guard isValid, let base64Avatar = image!.toBase64String() else { return }
    
        presenter?.createUser(name: name, email: email, mobile: mobile, password: password!, avatar: "data:image/jpeg;base64,\(base64Avatar)")
	}
}

extension SignupViewController: UITextFieldDelegate {
    func textFieldDidEndEditing(_ textField: UITextField) {
        guard !fullNameTextField.text!.isBlank else { return }
        guard !emailTextField.text!.isBlank else { return }
        guard !mobileNumberTextField.text!.isBlank else { return }
        guard !passwordTextField.text!.isBlank else { return }
        
        saveButton.backgroundColor = UIColor.init(hex: "E4002B")
        saveButton.isEnabled = true
    }
}

extension SignupViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
	func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
		if let image = info[UIImagePickerControllerOriginalImage] as? UIImage {
			profilePictureImageView.image = image
		}
		
		picker.dismiss(animated: true, completion: nil);
	}
}

extension SignupViewController: SelectPhotoSourcePopupActionProtocol {
	
	func showCamera() {
		if UIImagePickerController.isSourceTypeAvailable(.camera){
			let imagePicker = UIImagePickerController()
			
			imagePicker.delegate = self
			imagePicker.sourceType = .camera
			imagePicker.allowsEditing = false
			
			self.present(imagePicker, animated: true, completion: nil)
		}
	}
	
	func showAlbum() {
		if UIImagePickerController.isSourceTypeAvailable(.savedPhotosAlbum){
			
			let imagePicker = UIImagePickerController()
			
			imagePicker.delegate = self
			imagePicker.sourceType = .savedPhotosAlbum
			imagePicker.allowsEditing = false
			
			self.present(imagePicker, animated: true, completion: nil)
		}
	}
}
