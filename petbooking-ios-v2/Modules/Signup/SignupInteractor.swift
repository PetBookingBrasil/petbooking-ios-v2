//
//  SignupInteractor.swift
//  petbooking-ios-v2
//
//  Created Ryniere S Silva on 29/04/17.
//  Copyright © 2017 Pet Booking Serviços e Desenvolvimento de Softwares SA. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import FacebookCore
import Mantle

class SignupInteractor: SignupInteractorProtocol {
	
	var signupType:SignupType?
	
	weak var presenter: SignupPresenterProtocol?
	
	func fillFields() {
		
		switch signupType! {
		case .facebook:
			let connection = GraphRequestConnection()
			connection.add(GraphRequest(graphPath: "/me", parameters:["fields": "id, name, email, picture"])) { httpResponse, result in
				switch result {
				case .success(let response):
					print("Graph Request Succeeded: \(response)")
					
					if let dic = response.dictionaryValue {
						do {
							let facebookGraph = try MTLJSONAdapter.model(of: FacebookGraphModel.self, fromJSONDictionary: dic) as! FacebookGraphModel
							
							self.presenter?.setProfileImageView(urlString: facebookGraph.profileUrl)
							self.presenter?.setNameLabel(name: facebookGraph.name)
							self.presenter?.setEmail(email: facebookGraph.email)
							
						} catch {
							
						}
					}
				case .failed(let error):
					print("Graph Request Failed: \(error)")
				}
			}
			connection.start()
			break
		case .email:
			break
		case .editProfile:
			
			guard let user = UserManager.sharedInstance.getCurrentUser() else {
				return
			}
			
			
			
			let dateFormatter = DateFormatter()
			let birthday = dateFormatter.convertDateFormater(dateString: user.birthday, fromFormat: "yyyy-MM-dd", toFormat: "dd/MM/yyyy")
			self.presenter?.setProfileImageView(urlString: user.avatarUrlLarge)
			self.presenter?.setNameLabel(name: user.name)
			self.presenter?.setEmail(email:user.email)
			self.presenter?.setUserDetails(mobile: user.phone, cpf: user.cpf, birthday: birthday, zipcode: user.zipcode)
			self.presenter?.fillAdrressFields(street: user.street, streetNumber: user.streetNumber, neighborhood: user.neighborhood, city: user.city, state: user.state)
			
			break
		}
		
	}
	
	func fillAdrressWithZipcode(zipcode:String) {
		
		ViaCepAPI.sharedInstance.getAddressByZipcode(zipcode: zipcode) { (address, message) in
			
			guard let address = address else {
				return
			}
			self.presenter?.fillAdrressFields(street: address.street, streetNumber: "", neighborhood: address.neighborhood, city: address.city, state: address.state)
			
		}
	}
	
	func createUser(name:String, cpf:String, birthday:String, email:String, mobile:String, zipcode:String, street:String, streetNumber:String, neighborhood:String, city:String, state:String, password:String, avatar:String) {
		
		var provider = "b2beauty"
		var providerToken = ""
		if signupType == .facebook {
			if let token = AccessToken.current?.authenticationToken {
				provider = "facebook"
				providerToken = token
			}
		}
		
		let dateFormatter = DateFormatter()
		let birthdaySaveFormat = dateFormatter.convertDateFormater(dateString: birthday, fromFormat: "dd/MM/yyyy", toFormat: "yyyy-MM-dd")
		
		if signupType == .editProfile {
			
			PetbookingAPI.sharedInstance.updateUser(name: name, cpf: cpf, birthday: birthdaySaveFormat, email: email, mobile: mobile, zipcode: zipcode, street: street, streetNumber: streetNumber, neighborhood: neighborhood, city: city, state: state,avatar:avatar) { (success, message) in
				
				if success {
				 self.presenter?.updatedUserWithSuccess()
				} else {
					self.presenter?.createUserWithError()
				}
			}
			
		} else {
			
			PetbookingAPI.sharedInstance.createUser(name: name, cpf: cpf, birthday: birthdaySaveFormat, email: email, mobile: mobile, zipcode: zipcode, street: street, streetNumber: streetNumber, neighborhood: neighborhood, city: city, state: state, password: password, provider: provider, providerToken: providerToken, avatar:avatar) { (success, message) in
				
				if success {
				 self.presenter?.createUserWithSuccess()
				} else {
					self.presenter?.createUserWithError()
				}
			}
		}
	}
}

enum SignupType {
	case email, facebook, editProfile
}
