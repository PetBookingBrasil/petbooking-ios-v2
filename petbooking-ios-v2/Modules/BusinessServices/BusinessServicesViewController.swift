//
//  BusinessServicesViewController.swift
//  petbooking-ios-v2
//
//  Created Ryniere S Silva on 24/07/17.
//  Copyright © 2017 Pet Booking Serviços e Desenvolvimento de Softwares SA. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import BEMCheckBox
import ALLoadingView
import RealmSwift

class BusinessServicesViewController: ExpandableTableViewController, BusinessServicesViewProtocol {
	
	var presenter: BusinessServicesPresenterProtocol?
    var service: ServiceCategory?
	
	@IBOutlet weak var goToChartButton: UIButton!
	
	var business: Business = Business()
	var petList: PetList = PetList()
	var serviceCategoryList: ServiceCategoryList = ServiceCategoryList()
	var serviceList: ServiceList = ServiceList()
	var selectedPet: Pet = Pet()
	var selectedServiceCategory: ServiceCategory = ServiceCategory()
	var selectedService: Service = Service()
	var selectedSubServices = [SubService]()
	var professionalList: ProfessionalList! = ProfessionalList()
	var selectedProfessional: Professional = Professional()
	var currentIndexPath: ExpandableIndexPath = ExpandableIndexPath(forSection: 0, forRow: 0, forSubRow: 0)
	
	// Delegates
	weak var selectPetDelegate:BusinessServicesViewControllerDelegate?
	
	override func viewDidLoad() {
		super.viewDidLoad()
		
		setBackButton()
		
		ScheduleManager.sharedInstance.cleanSchedule()
		ScheduleManager.sharedInstance.createNewSchedule(business: business)
		
		goToChartButton.round()
		
		expandableTableView.expandableDelegate = self
		expandableTableView.register(UINib(nibName: "ServiceRowTableViewCell", bundle: nil), forCellReuseIdentifier: "ServiceRowTableViewCell")
		expandableTableView.register(UINib(nibName: "SelectPetTableViewCell", bundle: nil), forCellReuseIdentifier: "SelectPetTableViewCell")
		expandableTableView.register(UINib(nibName: "SelectCategoryTableViewCell", bundle: nil), forCellReuseIdentifier: "SelectCategoryTableViewCell")
		expandableTableView.register(UINib(nibName: "SelectServiceTableViewCell", bundle: nil), forCellReuseIdentifier: "SelectServiceTableViewCell")
		expandableTableView.register(UINib(nibName: "SelectProfessionalTableViewCell", bundle: nil), forCellReuseIdentifier: "SelectProfessionalTableViewCell")
		expandableTableView.register(UINib(nibName: "SelectDateTableViewCell", bundle: nil), forCellReuseIdentifier: "SelectDateTableViewCell")
		
		ALLoadingView.manager.showLoadingView(ofType: .basic, windowMode: .fullscreen)
		presenter?.getPets()
	}
	
	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)

		expandableTableView.reloadData()
		
		checkServices()
	}
	
	deinit {
		ScheduleManager.sharedInstance.cleanSchedule()
	}
	
	func loadPets(petList: PetList) {
		self.petList = petList
        
		if self.selectedPet.id.isBlank {
			guard let pet = self.petList.pets.first else { return }
			
            selectedPet = pet
			presenter?.getCategories(business: business)
		}
		
		self.expandableTableView.reloadData()
		
        if self.petList.pets.count > 1 {
            showContent(indexPath: IndexPath(row: 0, section: 0))
        } else {
            showContent(indexPath: IndexPath(row: 1, section: 0))
        }
		
		selectPetDelegate?.loadPets(petList: petList)
	}
	
	func loadCategories(serviceCategoryList: ServiceCategoryList) {
		ALLoadingView.manager.hideLoadingView()
		
		self.serviceCategoryList = serviceCategoryList
        
        if let service = self.service {
            self.selectedServiceCategory = service
            if self.petList.pets.count == 1 {
                findCategory()
                setSelectedCategory(selectedServiceCategory: self.selectedServiceCategory)
            }
        }
		
		expandableTableView.reloadData()
	}
	
	func loadServices(serviceList: ServiceList) {
		ALLoadingView.manager.hideLoadingView()
		self.serviceList = serviceList
        
		expandableTableView.reloadData()
	}
	
	@IBAction func goToCart(_ sender: Any) {
		ScheduleManager.sharedInstance.addServiceToSchedule(business: business, pet: selectedPet, serviceCategory: selectedServiceCategory, service: selectedService)
		
		for subService in selectedSubServices {
			ScheduleManager.sharedInstance.addSubServiceToSchedule(business: business, pet: selectedPet, serviceCategory: selectedServiceCategory, service: selectedService, subService: subService)
		}
		
		checkServices()
		
		let alertVC = ScheduleToTheCartAlertViewController()
		alertVC.delegate = self
		alertVC.modalPresentationStyle = .overCurrentContext
		alertVC.modalTransitionStyle = .crossDissolve
		self.present(alertVC, animated: true, completion: nil)
	}
	
	func checkServices() {
		let nc = NotificationCenter.default
		nc.post(name:Notification.Name(rawValue:"cartUpdateNotification"),
		        object: nil,
		        userInfo:nil)
	}
    
	func clearSchedule() {
		selectedService = Service()
		selectedServiceCategory = ServiceCategory()
		selectedProfessional = Professional()
		selectedSubServices = [SubService]()
		self.showContent(indexPath: IndexPath(row: 4, section: 0))
		self.expandableTableView.reloadData()
		self.showContent(indexPath: IndexPath(row: 1, section: 0))
		goToChartButton.isHidden = true
	}
}

extension BusinessServicesViewController: ScheduleToTheCartAlertDelegate {
    func goToCart() {
        let cart = CartRouter.createModule(business:business)
        
        self.navigationController?.pushViewController(cart, animated: true)
        
        clearSchedule()
    }
    
    func scheduleMore() {
        clearSchedule()
    }

    func scheduleAnotherPet() {
        serviceList = ServiceList()
        selectedService = Service()
        selectedSubServices = [SubService]()
        professionalList = ProfessionalList()
        selectedProfessional = Professional()
        currentIndexPath = ExpandableIndexPath(forSection: 0, forRow: 0, forSubRow: 0)
        
        self.expandableTableView.reloadData()
        
        if self.petList.pets.count == 1 {
            print("Criar pet")
        } else {
            showContent(indexPath: IndexPath(row: 1, section: 0))
            selectPetDelegate?.loadPets(petList: petList)
            expandableTableView.reloadData()
        }

        goToChartButton.isHidden = true
    }
}

extension BusinessServicesViewController: ExpandableTableViewDelegate, ServiceRowTableViewCellDelegate, SelectPetTableViewCellDelegate, SelectCategoryTableViewCellDelegate, SelectServiceTableViewCellDelegate, SelectProfessionalTableViewCellDelegate, SelectDateTableViewCellDelegate {
	
	// Rows
	func expandableTableView(_ expandableTableView: ExpandableTableView, numberOfRowsInSection section: Int) -> Int {
		return 5
	}
    
	func expandableTableView(_ expandableTableView: ExpandableTableView, cellForRowAtExpandableIndexPath expandableIndexPath: ExpandableIndexPath) -> UITableViewCell {
		
		let cell = expandableTableView.dequeueReusableCellWithIdentifier("ServiceRowTableViewCell", forIndexPath: expandableIndexPath) as!ServiceRowTableViewCell
		cell.delegate = self
		cell.indexPath = IndexPath(row: expandableIndexPath.row, section: expandableIndexPath.section)
		
		switch expandableIndexPath.row {
		case 0:
			if !self.selectedPet.id.isBlank {
				cell.contentView.isHidden = false
				
				if selectedPet.type == "dog" {
                    cell.iconImageView.image = UIImage(named:"avatar-padrao-cachorro")
                } else {
                    cell.iconImageView.image = UIImage(named:"avatar-padrao-gato")
                }
                if let url = URL(string: selectedPet.photoThumbUrl) {
                    cell.iconImageView.pin_setImage(from: url)
                }
				
				cell.titleLabel.text = self.selectedPet.name
			} else {
				cell.contentView.isHidden = true
			}
			
		case 1:
			if !selectedServiceCategory.id.isBlank {
				cell.contentView.isHidden = false
				cell.titleLabel.text = selectedServiceCategory.name
				cell.iconImageView.image = UIImage(named:selectedServiceCategory.slug)
			} else {
				cell.contentView.isHidden = true
			}
			
		case 2:
			if !selectedService.id.isBlank{
				cell.contentView.isHidden = false
				cell.titleLabel.text = selectedService.name
				cell.iconImageView.image = UIImage(named:"checkedIcon")
			} else {
				cell.contentView.isHidden = true
			}

        case 3:
			if !selectedProfessional.id.isBlank{
				cell.contentView.isHidden = false
				cell.titleLabel.text = selectedProfessional.name
				cell.iconImageView.image = UIImage(named:"avatar-padrao-m")
				if let url = URL(string: selectedProfessional.photoThumbUrl) {
					cell.iconImageView.pin_setImage(from: url)
				}
			} else {
				cell.contentView.isHidden = true
			}

        case 4:
			cell.contentView.isHidden = true

		default:
			break
		}
		
		return cell
	}
	
	func expandableTableView(_ expandableTableView: ExpandableTableView, heightForRowAtExpandableIndexPath expandableIndexPath: ExpandableIndexPath) -> CGFloat {
				
		switch expandableIndexPath.row {
		case 1:
			if selectedServiceCategory.id.isBlank {
				return 0
			}
			
		case 2:
			if selectedService.id.isBlank {
				return 0
			}
			
		case 3:
			if selectedProfessional.id.isBlank {
				return 0
			}
            
		case 4:
			return 0
			
		default:
			break
		}
		
		return 60
	}
	func expandableTableView(_ expandableTableView: ExpandableTableView, estimatedHeightForRowAtExpandableIndexPath expandableIndexPath: ExpandableIndexPath) -> CGFloat {
		return 50
	}
	func expandableTableView(_ expandableTableView: ExpandableTableView, didSelectRowAtExpandableIndexPath expandableIndexPath: ExpandableIndexPath) { }
	
	// Subrows
	func expandableTableView(_ expandableTableView: ExpandableTableView, numberOfSubRowsInRowAtExpandableIndexPath expandableIndexPath: ExpandableIndexPath) -> Int {
		return 1
	}
    
	func expandableTableView(_ expandableTableView: ExpandableTableView, subCellForRowAtExpandableIndexPath expandableIndexPath: ExpandableIndexPath) -> UITableViewCell {

		currentIndexPath = expandableIndexPath
		switch expandableIndexPath.row {
		case 0:
			let cell = expandableTableView.dequeueReusableCellWithIdentifier("SelectPetTableViewCell", forIndexPath: expandableIndexPath) as!SelectPetTableViewCell
            cell.delegate = self
			cell.petList = self.petList
			cell.selectedPet = self.selectedPet
            cell.collectionView.reloadData()
            selectPetDelegate = cell
            
			return cell
            
		case 1:
			let cell = expandableTableView.dequeueReusableCellWithIdentifier("SelectCategoryTableViewCell", forIndexPath: expandableIndexPath) as!SelectCategoryTableViewCell
			cell.delegate = self
			cell.serviceCategoryList = serviceCategoryList
			cell.selectedServiceCategory = selectedServiceCategory
            cell.collectionView.reloadData()
            
			return cell
            
		case 2:
			let cell = expandableTableView.dequeueReusableCellWithIdentifier("SelectServiceTableViewCell", forIndexPath: expandableIndexPath) as!SelectServiceTableViewCell
			
			if !self.selectedService.id.isBlank {
				cell.services = [selectedService]
			} else {
				cell.services = serviceList.services
			}
			
			cell.serviceList = serviceList
			cell.selectedSubServices = self.selectedSubServices
			cell.selectedServiceCategory = self.selectedServiceCategory
			cell.selectedPet = self.selectedPet
			cell.selectedService = self.selectedService
			cell.business = self.business
			cell.delegate = self
			cell.tableView.reloadData()
            
			return cell
            
		case 3:
			let cell = expandableTableView.dequeueReusableCellWithIdentifier("SelectProfessionalTableViewCell", forIndexPath: expandableIndexPath) as!SelectProfessionalTableViewCell
			cell.professionalList = self.professionalList
			cell.delegate = self
			cell.collectionView.reloadData()
            
			return cell
            
		case 4:
			let cell = expandableTableView.dequeueReusableCellWithIdentifier("SelectDateTableViewCell", forIndexPath: expandableIndexPath) as!SelectDateTableViewCell
			cell.selectedPet = selectedPet
			cell.selectedService = selectedService
			cell.selectedProfessional = self.selectedProfessional
			cell.reloadTimeColletion(professional: selectedProfessional)
			cell.delegate = self
            
			return cell
            
		default:
			break
            
		}
		
		return UITableViewCell()
	}
    
	func expandableTableView(_ expandableTableView: ExpandableTableView, heightForSubRowAtExpandableIndexPath expandableIndexPath: ExpandableIndexPath) -> CGFloat {
		
		switch expandableIndexPath.row {
		case 0:
			return 323
		case 1:
			let qty = serviceCategoryList.categories.count / 3 <= 1 ? 1 : serviceCategoryList.categories.count / 3
			let height = qty <= 3 ? qty * 120 : 360
			return CGFloat(height + 100)
		case 2:
			let qty = serviceList.services.count
			return CGFloat(90 + qty * 61)
		case 3:
			return 265
		case 4:
			return 460
		default:
			return 265
		}
	}
	
	func expandableTableView(_ expandableTableView: ExpandableTableView, estimatedHeightForSubRowAtExpandableIndexPath expandableIndexPath: ExpandableIndexPath) -> CGFloat {
		return 265
	}
    
	func expandableTableView(_ expandableTableView: ExpandableTableView, didSelectSubRowAtExpandableIndexPath expandableIndexPath: ExpandableIndexPath) {
		
	}
	
	func showContent(indexPath: IndexPath) {
		if indexPath.row != currentIndexPath.row {
			unexpandAllCells()
			tableView(expandableTableView, didSelectRowAt: indexPath)
		} else {
			tableView(expandableTableView, didSelectRowAt: indexPath)
			let nextIndexPath = IndexPath(row: indexPath.row + 1, section: indexPath.section)
			tableView(expandableTableView, didSelectRowAt: nextIndexPath)
		}
	}
	
	func setSelectedPet(selectedPet: Pet) {
		self.selectedPet = selectedPet
        
        if self.service == nil {
            showContent(indexPath: IndexPath(row: 1, section: 0))
            expandableTableView.reloadData()
        } else {
            findCategory()
            setSelectedCategory(selectedServiceCategory: self.selectedServiceCategory)
        }
	}
    
    func findCategory() {
        for category in self.serviceCategoryList.categories where category.name == self.service!.name {
            self.selectedServiceCategory = category
        }
    }
	
	func setSelectedCategory(selectedServiceCategory: ServiceCategory) {
		self.selectedServiceCategory = selectedServiceCategory
		self.expandableTableView.reloadData()
		
		showContent(indexPath: IndexPath(row: 2, section: 0))
		
		self.presenter?.getServices(business: business, service: selectedServiceCategory, pet: selectedPet)
	}
	
	func setSelectedService(selectedService: Service, selectedSubServices:[SubService]) {
		self.selectedService = selectedService
		self.selectedSubServices = selectedSubServices
		
		PetbookingAPI.sharedInstance.getProfessionalsList(service: self.selectedService) { (professionalList, message) in
			
			self.professionalList = professionalList
			self.expandableTableView.reloadData()
			self.showContent(indexPath: IndexPath(row: 3, section: 0))
		}
	}
	
	func setSelectedProfessional(professional: Professional) {
		self.selectedProfessional = professional
		self.expandableTableView.reloadData()
		
		selectedService.professionalId = professional.id
		selectedService.professionalName = professional.name
		selectedService.professionalPicture =  professional.photoThumbUrl
		
		self.showContent(indexPath: IndexPath(row: 4, section: 0))
		self.expandableTableView.scrollToRow(at: IndexPath(row: 4, section: 0), at: .top, animated: true)
	}
	
	func setSelectedTime(service: Service) {
		selectedService = service
        goToChartButton.isHidden = false
	}
}

protocol BusinessServicesViewControllerDelegate: class {
	func loadPets(petList:PetList)
}

