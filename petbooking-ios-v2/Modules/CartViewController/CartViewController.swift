//
//  CartViewController.swift
//  petbooking-ios-v2
//
//  Created Ryniere S Silva on 03/08/17.
//  Copyright © 2017 Pet Booking Serviços e Desenvolvimento de Softwares SA. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class CartViewController: UIViewController, CartViewProtocol {

	@IBOutlet weak var tableView: UITableView!
	@IBOutlet weak var totalPriceLabel: UILabel!
	@IBOutlet weak var scheduleButton: UIButton!
	
	var presenter: CartPresenterProtocol?
	
	var business:Business = Business()

	override func viewDidLoad() {
        super.viewDidLoad()
		
		scheduleButton.round()
		
		tableView.register(UINib(nibName: "CartTableViewCell", bundle: nil), forCellReuseIdentifier: "CartTableViewCell")
		tableView.estimatedRowHeight = 2000
		
		title = "Carrinho de Agendamentos"
		
    }

	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)
		
		tableView.reloadData()
	}
	
	@IBAction func schedule(_ sender: Any) {
		
		guard let services = ScheduleManager.sharedInstance.getServicesByBusiness(business: self.business) else {
			return
		}
		
		var itens = [Dictionary<String, Any>]()
		for service in services {
			
			var subServiceIds = [String]()
			for subService in service.services {
				subServiceIds.append(subService.subServiceId)

			}
			
			let item = ["start_date":service.startDate, "start_time":service.startTime,"business_id":service.businessId, "service_id":service.serviceId, "professional_id":service.professionalId, "pet_id": service.petId, "additional_service_ids":subServiceIds, "with_transportation":false, "notes":""] as [String : Any]
			
			itens.append(item)
		}
		
		PetbookingAPI.sharedInstance.createShoppingCart(itens: itens) { (cart, message) in
			
			guard let cart = cart else {
				return
			}
			
			let cartVC = CartWebRouter.createModule(cart: cart)
			
			self.navigationController?.pushViewController(cartVC, animated: true)
			
		}
		
	}
	
}

extension CartViewController: UITableViewDelegate, UITableViewDataSource{
	
	func numberOfSections(in tableView: UITableView) -> Int {
		
			let schedule = ScheduleManager.sharedInstance.getSchedule(business: business)
		
		return schedule.petsSchedule.count
		
	}
	
	func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
		
		let schedule = ScheduleManager.sharedInstance.getSchedule(business: business)
		
		let schedulePet = schedule.petsSchedule[section]
		
		guard let scheduleServices = ScheduleManager.sharedInstance.getServicesByPet(schedulePet: schedulePet) else {
			return 0
		}
		
		return scheduleServices.count
		
	}
	
	func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
		return  UITableViewAutomaticDimension
	}
	
	func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
		
		let cell = tableView.dequeueReusableCell(withIdentifier: "CartTableViewCell") as! CartTableViewCell
		
		let schedule = ScheduleManager.sharedInstance.getSchedule(business: business)
		
		let schedulePet = schedule.petsSchedule[indexPath.section]
		
		guard let scheduleServices = ScheduleManager.sharedInstance.getServicesByPet(schedulePet: schedulePet) else {
			return cell
		}
		
		let service = scheduleServices[indexPath.row]
		
		cell.tableViewHeightConstraint.constant = CGFloat(service.services.count * 30)
		
		cell.serviceNameLabel.text = service.name
		cell.professionalNameLabel.text = service.professionalName
		cell.priceLabel.text =  String(format: "R$ %.2f", service.price)
		
		var totalPrice = service.price
		
		for subservice in service.services {
			totalPrice += subservice.price
		}
		cell.totalPriceLabel.text =  String(format: "R$ %.2f", totalPrice)
		
		let dateFormatter = DateFormatter()
		dateFormatter.dateFormat = "yyyy-MM-dd HH:mm"
		let date = dateFormatter.date(from: "\(service.startDate) \(service.startTime)")
		
		let dateString = dateFormatter.convertDateFormater(dateString: "\(service.startDate) \(service.startTime)", fromFormat: "yyyy-MM-dd HH:mm", toFormat: "dd 'de' MMMM")
		
		let endDate = date?.addingTimeInterval(service.duration)
		
		dateFormatter.dateFormat = "hh:mm"
		
		let endDateString = dateFormatter.string(from: endDate!)
		
		cell.dateLabel.text = "\(dateString), \(service.startTime) — \(endDateString)"
		
		
		return cell
		
	}
	
}
